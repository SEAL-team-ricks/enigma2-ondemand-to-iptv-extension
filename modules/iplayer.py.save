class odmodule():

	import os

	parent = ""
	bouquetLocation = ""
	rawLocation = ""
	moduelName="BBC iPlayer"
	serverip=""

	#def __init__(self, parent):
		#self.parent = parent
        	#self.rawLocation = parent.getOndemandPath() + "/tmp/iplayer_raw.txt"
        	#self.bouquetLocation = parent.getOndemandPath() + "/tmp/iplayer_bouquet.txt"


	##Auto Run is called by the main program for each module at the interval set in the config




	def autorun(self, parent):
		print "running iplayer module..."




	def dependancies(self):
		if self.which("get_iplayer"):
			return True
		else:
			return "get_iplayer not available, install as BIN"

	def GenerateConvertedFile(self,raw,location):
		print "none"

	def GenerateRaw(self,location):
		print "none"

	#Check if a Binary Excists
	def which(self, program):
    		import os
		def is_exe(fpath):
			import os
      			return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    		fpath, fname = os.path.split(program)
    		if fpath:
       			if is_exe(program):
            			return program
    		else:
        		for path in os.environ["PATH"].split(os.pathsep):
            			exe_file = os.path.join(path, program)
            			if is_exe(exe_file):
                			return exe_file
    			return None

	def run(self,action,id):

		if action == "bouquet":
			return self.bouquet()


		if action == "stream":
			return self.stream(self.parent.getID())


	def stream(self,pid):

		import subprocess

		with open(self.rawLocation) as raw:
    			for num, line in enumerate(raw, 1):
        			if pid in line:
					indexID=line.split(":")[0]
		if indexID is not None:

			search = subprocess.check_output(["get_iplayer", "--streaminfo",indexID], stderr=subprocess.STDOUT)
			return self.findStream(search)

		else:

			return False


	def findStream(self,stdout):
		#Extract Streaming URL

		#clean list
		hPriority=0
		lines = stdout.splitlines()
		num=0
		streamingURL=None
		priority=0
		ext=""
		cleanedLines = lines
		newLines=[]

		keeps = ['ext:','priority:','streamurl:']

                for line in lines:
                    if any(keep in line for keep in keeps):
                          newLines.append(line)

		for line in newLines:
			num=num+1

			if line[:8] == "priority": 

				ext=newLines[num-2].replace(" ","").split(":")[1]
				priority=line.split(":")[1]

				if ext == "mp4" and priority > hPriority:
                                	streamingURL=newLines[num].replace(" ","").split("url:")[1]

			ext=""
			prority=0


		return streamingURL
		if streamingURL is None:
			return "http://8.8.8.8"
		return streamingURL


	def check(self):
		import os
		#Check for dependancies for this module to function
                if self.dependancies() <> True:
                        return self.dependancies

                #If Raw File is Missing
                if not os.path.isfile(self.rawLocation) :
                        self.generateRaw()


	def bouquet(self):
		import os
		import urllib

		self.check()

		#If File is Missing
		if not os.path.isfile(self.bouquetLocation) :
			self.generateBouquet()

		self.generateBouquet()

		##If file older than hour
			#self.generateBouquet(rawLocation,bouquetLocation);

		with file(self.bouquetLocation) as b:
        		s = b.read()
		return s

	def generateRaw(self):
		import os
		os.system("get_iplayer > "+self.rawLocation)


	def bouquetExcludes(self):

		excludes = []

		if self.parent.getParam("exclude_kids") == "true":
			excludes.append(["CBeebies","CBBC"])

                if self.parent.getParam("exclude_news") == "true":
                       excludes.append(["weather","news","News"])

                if self.parent.getParam("exclude_wales") == "true":
                        excludes.append(["BBC Two Wales"])

                if self.parent.getParam("exclude_alba") == "true":
                        excludes.append(["Alba","alba"])

                if self.parent.getParam("exclude_others") is not None:
			for kw in self.parent.getParam("exclude_others").split(","):
                        	excludes.append([kw])

		return excludes


	def generateBouquet(self):

		import urllib

		n="#NAME "+self.moduelName+" \n"
		with file(self.rawLocation) as b:
			l = b.readlines()
			for line in l:
				if line[0].isdigit():
					line=line.split(":",1)[1]
					title=line.split(",")[0].replace("	","")
					channel=line.split(",")[1]
					pid=line.split(",")[2]

					line = line.replace("	","") 


					##Getting some wierd things when i tried for X in Y for X in List:
					exclude=False
					for excludeKey in self.bouquetExcludes():
						if excludeKey[0].lower() in channel.lower() or excludeKey[0].lower() in title.lower():
							exclude=True

					if exclude==False:
						line = self.parent.generateBouquetLine(pid,title)
						n=n+line + "\n"
		f = open(self.bouquetLocation, 'w')
		f.write(n)  
		f.close() 

		return n

